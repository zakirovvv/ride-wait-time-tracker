
import { useEffect, useRef, useState, useCallback } from 'react';

export const useBroadcastSync = () => {
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();
  const [isConnected, setIsConnected] = useState(false);
  const [connectionAttempts, setConnectionAttempts] = useState(0);

  const connectWebSocket = useCallback(() => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ws:// –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤–º–µ—Å—Ç–æ wss://
      const wsUrl = `ws://localhost:3001`;
      
      console.log('üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', wsUrl);
      
      wsRef.current = new WebSocket(wsUrl);

      wsRef.current.onopen = () => {
        console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        setIsConnected(true);
        setConnectionAttempts(0);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        wsRef.current?.send(JSON.stringify({ type: 'request-sync' }));
      };

      wsRef.current.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data.type);
          
          if (data.type === 'init') {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
            console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞');
            
            if (data.queueData) {
              window.dispatchEvent(new CustomEvent('server-queue-sync', { 
                detail: data.queueData 
              }));
            }
            
            if (data.settingsData) {
              window.dispatchEvent(new CustomEvent('server-settings-sync', { 
                detail: data.settingsData 
              }));
            }
          }
          
          if (data.type === 'queue-sync') {
            console.log('üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            window.dispatchEvent(new CustomEvent('server-queue-sync', { 
              detail: data.data 
            }));
          }
          
          if (data.type === 'settings-sync') {
            console.log('üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            window.dispatchEvent(new CustomEvent('server-settings-sync', { 
              detail: data.data 
            }));
          }
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error);
        }
      };

      wsRef.current.onclose = () => {
        console.log('‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ');
        setIsConnected(false);
        setConnectionAttempts(prev => prev + 1);
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        const delay = Math.min(3000, 1000 * connectionAttempts);
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${delay}ms...`);
        
        reconnectTimeoutRef.current = setTimeout(connectWebSocket, delay);
      };

      wsRef.current.onerror = (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
        setIsConnected(false);
      };

    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', error);
      setIsConnected(false);
      setConnectionAttempts(prev => prev + 1);
      
      const delay = Math.min(5000, 1000 * connectionAttempts);
      reconnectTimeoutRef.current = setTimeout(connectWebSocket, delay);
    }
  }, [connectionAttempts]);

  useEffect(() => {
    connectWebSocket();

    return () => {
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
      if (wsRef.current) {
        wsRef.current.close();
      }
    };
  }, [connectWebSocket]);

  const broadcastUpdate = useCallback((type: 'queue-update' | 'settings-update', data: any) => {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ${type} –Ω–∞ —Å–µ—Ä–≤–µ—Ä:`, data);
    
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      try {
        wsRef.current.send(JSON.stringify({ type, data }));
        console.log(`‚úÖ ${type} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ${type}:`, error);
      }
    } else {
      console.log(`‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${type}`);
    }
  }, []);

  const requestSync = useCallback(() => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify({ type: 'request-sync' }));
      console.log('üì§ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
    }
  }, []);

  return { 
    broadcastUpdate, 
    isConnected,
    requestSync
  };
};
