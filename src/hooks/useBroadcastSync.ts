
import { useEffect, useRef } from 'react';

export const useBroadcastSync = () => {
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();

  const connectWebSocket = () => {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å WebSocket —Å–µ—Ä–≤–µ—Ä–∞
      const wsUrl = `ws://${window.location.hostname}:3001`;
      console.log('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', wsUrl);
      
      wsRef.current = new WebSocket(wsUrl);

      wsRef.current.onopen = () => {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      };

      wsRef.current.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          
          if (data.type === 'init') {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
            if (data.queue && data.queue.length > 0) {
              localStorage.setItem('park-queue', JSON.stringify(data.queue));
              window.dispatchEvent(new CustomEvent('queue-sync', { detail: data.queue }));
            }
            if (data.settings && data.settings.length > 0) {
              localStorage.setItem('park-settings', JSON.stringify(data.settings));
              window.dispatchEvent(new CustomEvent('settings-sync', { detail: data.settings }));
            }
          }
          
          if (data.type === 'queue-sync') {
            localStorage.setItem('park-queue', JSON.stringify(data.data));
            window.dispatchEvent(new CustomEvent('queue-sync', { detail: data.data }));
            console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
          }
          
          if (data.type === 'settings-sync') {
            localStorage.setItem('park-settings', JSON.stringify(data.data));
            window.dispatchEvent(new CustomEvent('settings-sync', { detail: data.data }));
            console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞');
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error);
        }
      };

      wsRef.current.onclose = () => {
        console.log('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
        reconnectTimeoutRef.current = setTimeout(connectWebSocket, 3000);
      };

      wsRef.current.onerror = (error) => {
        console.error('–û—à–∏–±–∫–∞ WebSocket:', error);
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
      reconnectTimeoutRef.current = setTimeout(connectWebSocket, 3000);
    }
  };

  useEffect(() => {
    connectWebSocket();

    return () => {
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
      if (wsRef.current) {
        wsRef.current.close();
      }
    };
  }, []);

  const broadcastUpdate = (type: 'queue-update' | 'settings-update', data: any) => {
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify({ type, data }));
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${type} –Ω–∞ —Å–µ—Ä–≤–µ—Ä`);
    } else {
      console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ');
    }
  };

  return { 
    broadcastUpdate, 
    isConnected: wsRef.current?.readyState === WebSocket.OPEN 
  };
};
