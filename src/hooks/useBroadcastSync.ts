
import { useEffect, useRef, useState } from 'react';

export const useBroadcastSync = () => {
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();
  const [isConnected, setIsConnected] = useState(false);
  const [connectionAttempts, setConnectionAttempts] = useState(0);

  const connectWebSocket = () => {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      const wsUrl = `${protocol}//${window.location.hostname}:3001`;
      
      console.log('üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', wsUrl);
      
      wsRef.current = new WebSocket(wsUrl);

      wsRef.current.onopen = () => {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        setIsConnected(true);
        setConnectionAttempts(0);
      };

      wsRef.current.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          
          if (data.type === 'init') {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
            if (data.queue && data.queue.length > 0) {
              localStorage.setItem('park-queue', JSON.stringify(data.queue));
              window.dispatchEvent(new CustomEvent('queue-sync', { detail: data.queue }));
            }
            if (data.settings && data.settings.length > 0) {
              localStorage.setItem('park-settings', JSON.stringify(data.settings));
              window.dispatchEvent(new CustomEvent('settings-sync', { detail: data.settings }));
            }
          }
          
          if (data.type === 'queue-sync') {
            localStorage.setItem('park-queue', JSON.stringify(data.data));
            window.dispatchEvent(new CustomEvent('queue-sync', { detail: data.data }));
            console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
          }
          
          if (data.type === 'settings-sync') {
            localStorage.setItem('park-settings', JSON.stringify(data.data));
            window.dispatchEvent(new CustomEvent('settings-sync', { detail: data.data }));
            console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞');
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error);
        }
      };

      wsRef.current.onclose = () => {
        console.log('‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ');
        setIsConnected(false);
        setConnectionAttempts(prev => prev + 1);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const delay = Math.min(3000 * Math.pow(1.5, connectionAttempts), 30000);
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${delay}ms...`);
        
        reconnectTimeoutRef.current = setTimeout(connectWebSocket, delay);
      };

      wsRef.current.onerror = (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
        setIsConnected(false);
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      setIsConnected(false);
      setConnectionAttempts(prev => prev + 1);
      
      // Fallback –Ω–∞ localStorage —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const delay = Math.min(5000 * Math.pow(1.5, connectionAttempts), 60000);
      console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${delay}ms...`);
      
      reconnectTimeoutRef.current = setTimeout(connectWebSocket, delay);
    }
  };

  useEffect(() => {
    connectWebSocket();

    // Fallback: —Å–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è storage –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === 'park-queue') {
        window.dispatchEvent(new CustomEvent('queue-sync', { detail: JSON.parse(e.newValue || '[]') }));
      }
      if (e.key === 'park-settings') {
        window.dispatchEvent(new CustomEvent('settings-sync', { detail: JSON.parse(e.newValue || '[]') }));
      }
    };

    window.addEventListener('storage', handleStorageChange);

    return () => {
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
      }
      if (wsRef.current) {
        wsRef.current.close();
      }
      window.removeEventListener('storage', handleStorageChange);
    };
  }, []);

  const broadcastUpdate = (type: 'queue-update' | 'settings-update', data: any) => {
    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º localStorage –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const key = type === 'queue-update' ? 'park-queue' : 'park-settings';
    localStorage.setItem(key, JSON.stringify(data));
    
    // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify({ type, data }));
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${type} –Ω–∞ —Å–µ—Ä–≤–µ—Ä`);
    } else {
      console.log(`‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ`);
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      window.dispatchEvent(new CustomEvent(type === 'queue-update' ? 'queue-sync' : 'settings-sync', { detail: data }));
    }
  };

  return { 
    broadcastUpdate, 
    isConnected 
  };
};
