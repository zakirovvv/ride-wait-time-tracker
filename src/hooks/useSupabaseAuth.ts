
import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import type { Database } from '@/integrations/supabase/types';

type StaffMember = Database['public']['Tables']['staff_members']['Row'];

export const useSupabaseAuth = () => {
  const [currentUser, setCurrentUser] = useState<StaffMember | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const savedUser = localStorage.getItem('currentStaffUser');
    if (savedUser) {
      try {
        const parsedUser = JSON.parse(savedUser);
        console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ localStorage:', parsedUser);
        setCurrentUser(parsedUser);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        localStorage.removeItem('currentStaffUser');
      }
    }
    setIsLoading(false);
  }, []);

  const login = async (username: string, password: string): Promise<boolean> => {
    try {
      console.log('üîê –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);
      setIsLoading(true);
      
      const { data, error } = await supabase
        .from('staff_members')
        .select('*')
        .eq('username', username)
        .eq('password_hash', password)
        .single();

      console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', { data, error });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        setIsLoading(false);
        return false;
      }

      if (!data) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        setIsLoading(false);
        return false;
      }

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', data);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem('currentStaffUser', JSON.stringify(data));
      console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      setCurrentUser(data);
      console.log('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ currentUser –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', data);
      
      setIsLoading(false);
      console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      setIsLoading(false);
      return false;
    }
  };

  const logout = () => {
    console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    setCurrentUser(null);
    localStorage.removeItem('currentStaffUser');
  };

  const hasInstructorPermissions = (user: StaffMember | null) => {
    return user?.role === 'instructor' || user?.role === 'admin';
  };

  const hasAdminPermissions = (user: StaffMember | null) => {
    return user?.role === 'admin';
  };

  console.log('üè† useSupabaseAuth —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', { 
    currentUser: currentUser?.username, 
    role: currentUser?.role,
    isAuthenticated: !!currentUser,
    isLoading 
  });

  return {
    currentUser,
    isLoading,
    login,
    logout,
    hasInstructorPermissions,
    hasAdminPermissions,
    isAuthenticated: !!currentUser
  };
};
