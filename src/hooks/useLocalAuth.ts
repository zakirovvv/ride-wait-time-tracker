
import { useState, useEffect } from 'react';

export interface LocalStaffMember {
  id: string;
  username: string;
  password_hash: string;
  role: 'admin' | 'cashier' | 'instructor';
  name: string;
  attraction_id?: string;
}

const STAFF_DATA: LocalStaffMember[] = [
  {
    id: 'admin-1',
    username: 'admin',
    password_hash: '123',
    role: 'admin',
    name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
  },
  {
    id: 'cashier-1',
    username: 'cashier',
    password_hash: 'cashier6809',
    role: 'cashier',
    name: '–ö–∞—Å—Å–∏—Ä'
  },
  {
    id: 'instructor-jump-rope',
    username: 'jumprow',
    password_hash: 'jumprow6809',
    role: 'instructor',
    name: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –ü—Ä—ã–∂–æ–∫ —Å –≤–µ—Ä–µ–≤–∫–æ–π',
    attraction_id: 'jump-rope'
  },
  {
    id: 'instructor-swing-two',
    username: 'twoswing',
    password_hash: 'twoswing6809',
    role: 'instructor',
    name: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –ü–∞—Ä–Ω—ã–µ –∫–∞—á–µ–ª–∏',
    attraction_id: 'swing-two'
  },
  {
    id: 'instructor-rope-park',
    username: 'rope',
    password_hash: 'rope6809',
    role: 'instructor',
    name: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –í–µ—Ä–µ–≤–æ—á–Ω—ã–π –ø–∞—Ä–∫',
    attraction_id: 'rope-park'
  },
  {
    id: 'instructor-swing-single',
    username: 'swing',
    password_hash: 'swing6809',
    role: 'instructor',
    name: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –ö–∞—á–µ–ª–∏',
    attraction_id: 'swing-single'
  },
  {
    id: 'instructor-climbing',
    username: 'climbing',
    password_hash: 'climbing6809',
    role: 'instructor',
    name: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –°–∫–∞–ª–æ–¥—Ä–æ–º',
    attraction_id: 'climbing'
  },
  {
    id: 'instructor-mini-trolley',
    username: 'minitrolley',
    password_hash: 'minitrolley6809',
    role: 'instructor',
    name: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –ú–∏–Ω–∏-—Ç—Ä–æ–ª–ª–µ–π',
    attraction_id: 'mini-trolley'
  },
  {
    id: 'instructor-trolley',
    username: 'trolley',
    password_hash: 'trolley6809',
    role: 'instructor',
    name: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –¢—Ä–æ–ª–ª–µ–π',
    attraction_id: 'trolley'
  },
  {
    id: 'instructor-cave-descent',
    username: 'grot',
    password_hash: 'grot6809',
    role: 'instructor',
    name: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –°–ø—É—Å–∫ –≤ –ø–µ—â–µ—Ä—É',
    attraction_id: 'cave-descent'
  },
  {
    id: 'instructor-big-bridge',
    username: 'bigmost',
    password_hash: 'bigmost6809',
    role: 'instructor',
    name: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –ë–æ–ª—å—à–æ–π –º–æ—Å—Ç',
    attraction_id: 'big-bridge'
  },
  {
    id: 'instructor-small-bridge',
    username: 'smallmost',
    password_hash: 'smallmost6809',
    role: 'instructor',
    name: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –ú–∞–ª—ã–π –º–æ—Å—Ç',
    attraction_id: 'small-bridge'
  },
  {
    id: 'instructor-helicopter',
    username: 'helicopter',
    password_hash: 'helicopter6809',
    role: 'instructor',
    name: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –í–µ—Ä—Ç–æ–ª–µ—Ç',
    attraction_id: 'helicopter'
  }
];

export const useLocalAuth = () => {
  const [currentUser, setCurrentUser] = useState<LocalStaffMember | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const savedUser = localStorage.getItem('currentLocalUser');
    if (savedUser) {
      try {
        const parsedUser = JSON.parse(savedUser);
        console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ localStorage:', parsedUser);
        setCurrentUser(parsedUser);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        localStorage.removeItem('currentLocalUser');
      }
    }
    setIsLoading(false);
  }, []);

  const login = async (username: string, password: string): Promise<boolean> => {
    try {
      console.log('üîê –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);
      setIsLoading(true);
      
      const staff = STAFF_DATA.find(
        s => s.username === username && s.password_hash === password
      );

      if (!staff) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        setIsLoading(false);
        return false;
      }

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', staff);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem('currentLocalUser', JSON.stringify(staff));
      console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setCurrentUser(staff);
      console.log('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ currentUser –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', staff);
      
      setIsLoading(false);
      console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      setIsLoading(false);
      return false;
    }
  };

  const logout = () => {
    console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    setCurrentUser(null);
    localStorage.removeItem('currentLocalUser');
  };

  const hasInstructorPermissions = (user: LocalStaffMember | null) => {
    return user?.role === 'instructor' || user?.role === 'admin';
  };

  const hasAdminPermissions = (user: LocalStaffMember | null) => {
    return user?.role === 'admin';
  };

  console.log('üè† useLocalAuth —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', { 
    currentUser: currentUser?.username, 
    role: currentUser?.role,
    isAuthenticated: !!currentUser,
    isLoading 
  });

  return {
    currentUser,
    isLoading,
    login,
    logout,
    hasInstructorPermissions,
    hasAdminPermissions,
    isAuthenticated: !!currentUser
  };
};
