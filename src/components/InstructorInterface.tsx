
import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useQueueStore } from '@/stores/queueStore';
import { useStaffStore } from '@/stores/staffStore';
import { attractions } from '@/data/attractions';
import { toast } from '@/hooks/use-toast';
import { Users, CheckCircle, Clock, LogOut, AlertCircle, Settings } from 'lucide-react';

export const InstructorInterface = () => {
  const [selectedAttraction, setSelectedAttraction] = useState('');
  
  const {
    currentUser,
    logout,
    hasAdminPermissions
  } = useStaffStore();
  
  const {
    removeFromQueue,
    getAttractionQueue,
    queue: globalQueue
  } = useQueueStore();

  const isAdmin = hasAdminPermissions(currentUser);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞
  const attractionId = isAdmin ? selectedAttraction : currentUser?.attractionId;
  const attraction = attractions.find(a => a.id === attractionId);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  useEffect(() => {
    if (!isAdmin && currentUser?.attractionId) {
      setSelectedAttraction(currentUser.attractionId);
    }
  }, [currentUser, isAdmin]);

  // –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  const [queue, setQueue] = useState(() => attractionId ? getAttractionQueue(attractionId) : []);

  useEffect(() => {
    if (attractionId) {
      const updateQueue = () => {
        const currentQueue = getAttractionQueue(attractionId);
        setQueue(currentQueue);
      };
      
      updateQueue();
      const interval = setInterval(updateQueue, 1000);
      return () => clearInterval(interval);
    }
  }, [attractionId, getAttractionQueue, globalQueue]);

  const handleCompleteRide = (braceletCode: string, customerName: string) => {
    removeFromQueue(braceletCode);

    toast({
      title: "–ö–∞—Ç–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
      description: `${customerName} (${braceletCode}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∫–∞—Ç–∏–ª—Å—è`
    });
  };

  const handleLogout = () => {
    logout();
    toast({
      title: "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω",
      description: "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
    });
  };

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ –Ω–µ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  if (!currentUser || (currentUser.role !== 'instructor' && !isAdmin)) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-indigo-500 to-blue-500 p-6 flex items-center justify-center">
        <Card className="bg-white/95 backdrop-blur-sm max-w-md">
          <CardContent className="p-6 text-center">
            <AlertCircle className="w-12 h-12 mx-auto mb-4 text-red-500" />
            <h2 className="text-xl font-bold text-gray-800 mb-2">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
            <p className="text-gray-600 mb-4">–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</p>
            <Button onClick={handleLogout} variant="outline">
              –í—ã—Ö–æ–¥
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-indigo-500 to-blue-500 p-6">
      <div className="max-w-4xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex justify-between items-center mb-8">
          <div className="text-center flex-1">
            <h1 className="text-4xl font-bold text-white mb-4 drop-shadow-lg">
              {isAdmin ? '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –û—á–µ—Ä–µ–¥—è–º–∏' : `${attraction?.icon || 'üé¢'} –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - ${attraction?.name || '–ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω'}`}
            </h1>
            <p className="text-lg text-white/90 drop-shadow">
              {isAdmin ? '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏ –≤—Å–µ—Ö –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤' : '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞'}
            </p>
          </div>
          <div className="text-right">
            <div className="text-white mb-2">
              <span className="font-semibold">{currentUser?.name}</span>
            </div>
            <Button onClick={handleLogout} variant="outline" className="bg-white/20 text-white border-white/30 hover:bg-white/30">
              <LogOut className="w-4 h-4 mr-2" />
              –í—ã—Ö–æ–¥
            </Button>
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞ */}
        {!isAdmin && !currentUser?.attractionId && (
          <Card className="mb-6 bg-yellow-50 border-yellow-200">
            <CardContent className="p-6 text-center">
              <AlertCircle className="w-12 h-12 mx-auto mb-4 text-yellow-600" />
              <h2 className="text-xl font-bold text-yellow-800 mb-2">–ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</h2>
              <p className="text-yellow-700">–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞</p>
            </CardContent>
          </Card>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* –í—ã–±–æ—Ä –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ */}
          {isAdmin && (
            <Card className="bg-white/95 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center text-xl text-gray-800">
                  <Settings className="w-5 h-5 mr-2 text-blue-600" />
                  –í—ã–±–æ—Ä –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞
                </CardTitle>
              </CardHeader>
              <CardContent>
                <Select value={selectedAttraction} onValueChange={setSelectedAttraction}>
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω..." />
                  </SelectTrigger>
                  <SelectContent>
                    {attractions.filter(a => a.isActive).map((attraction) => (
                      <SelectItem key={attraction.id} value={attraction.id}>
                        <div className="flex items-center">
                          <span className="mr-2">{attraction.icon}</span>
                          <span>{attraction.name}</span>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>

                {attraction && (
                  <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                    <div className="text-sm text-gray-600">
                      <div>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {attraction.duration} –º–∏–Ω</div>
                      <div>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {attraction.capacity} —á–µ–ª</div>
                      <div>–í –æ—á–µ—Ä–µ–¥–∏: {queue.length} —á–µ–ª</div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–µ */}
          {attraction && (
            <Card className="bg-white/95 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="flex items-center text-xl text-gray-800">
                  <AlertCircle className="w-5 h-5 mr-2 text-blue-600" />
                  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–µ
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex items-center justify-center text-6xl mb-4">
                    {attraction.icon}
                  </div>
                  <div className="text-center">
                    <h3 className="text-xl font-bold text-gray-800 mb-2">
                      {attraction.name}
                    </h3>
                    <div className="space-y-2 text-sm text-gray-600">
                      <div className="flex justify-between">
                        <span>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                        <span className="font-semibold">{attraction.duration} –º–∏–Ω</span>
                      </div>
                      <div className="flex justify-between">
                        <span>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</span>
                        <span className="font-semibold">{attraction.capacity} —á–µ–ª</span>
                      </div>
                      <div className="flex justify-between">
                        <span>–í –æ—á–µ—Ä–µ–¥–∏:</span>
                        <span className="font-semibold text-blue-600">{queue.length} —á–µ–ª</span>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </div>

        {/* –û—á–µ—Ä–µ–¥—å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
        {attraction && (
          <Card className="mt-6 bg-white/95 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="flex items-center text-2xl text-gray-800">
                <Users className="w-6 h-6 mr-2 text-blue-600" />
                –û—á–µ—Ä–µ–¥—å: {attraction.name}
              </CardTitle>
            </CardHeader>
            <CardContent>
              {queue.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  <Users className="w-12 h-12 mx-auto mb-4 opacity-50" />
                  <p className="text-xl">–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞</p>
                  <p className="text-sm mt-2">–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å—Ä–∞–∑—É</p>
                </div>
              ) : (
                <div className="space-y-3">
                  <div className="text-sm text-gray-600 mb-4">
                    –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" –∫–æ–≥–¥–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –∫–∞—Ç–∞–Ω–∏–µ:
                  </div>
                  {queue.map((entry, index) => (
                    <div key={entry.id} className={`flex items-center justify-between p-4 rounded-lg border-2 ${
                      index === 0 
                        ? 'bg-green-50 border-green-200' 
                        : 'bg-gray-50 border-gray-200'
                    }`}>
                      <div className="flex items-center">
                        <div className={`rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-4 ${
                          index === 0 
                            ? 'bg-green-600 text-white' 
                            : 'bg-blue-600 text-white'
                        }`}>
                          {index + 1}
                        </div>
                        <div>
                          <div className="font-semibold text-gray-800">{entry.customerName}</div>
                          <div className="text-sm text-gray-500">
                            –ë—Ä–∞—Å–ª–µ—Ç: {entry.braceletCode}
                          </div>
                          <div className="text-xs text-gray-400 flex items-center">
                            <Clock className="w-3 h-3 mr-1" />
                            {index === 0 ? '–°–µ–π—á–∞—Å –∫–∞—Ç–∞–µ—Ç—Å—è' : `–í—Ä–µ–º—è: ${entry.estimatedTime.toLocaleTimeString('ru-RU', {
                              hour: '2-digit',
                              minute: '2-digit'
                            })}`}
                          </div>
                        </div>
                      </div>
                      <Button
                        onClick={() => handleCompleteRide(entry.braceletCode, entry.customerName)}
                        className="bg-green-600 hover:bg-green-700 text-white"
                        size="lg"
                      >
                        <CheckCircle className="w-4 h-4 mr-2" />
                        –ó–∞–≤–µ—Ä—à–∏—Ç—å
                      </Button>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
};
