
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useQueueStore } from '@/stores/queueStore';
import { attractions } from '@/data/attractions';
import { toast } from '@/hooks/use-toast';
import { Ticket, User, Clock } from 'lucide-react';

export const CashierInterface = () => {
  const [customerName, setCustomerName] = useState('');
  const [selectedAttraction, setSelectedAttraction] = useState('');
  const addToQueue = useQueueStore(state => state.addToQueue);
  const queueSummary = useQueueStore(state => state.getQueueSummary());

  const generateBraceletCode = () => {
    return `BR${Date.now().toString(36).toUpperCase().slice(-6)}`;
  };

  const handleSellTicket = () => {
    if (!customerName.trim() || !selectedAttraction) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
        variant: "destructive"
      });
      return;
    }

    const braceletCode = generateBraceletCode();
    
    addToQueue({
      attractionId: selectedAttraction,
      braceletCode,
      customerName: customerName.trim()
    });

    toast({
      title: "–ë–∏–ª–µ—Ç –ø—Ä–æ–¥–∞–Ω!",
      description: `–ë—Ä–∞—Å–ª–µ—Ç ${braceletCode} –≤—ã–¥–∞–Ω –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—é ${customerName}`,
    });

    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    setCustomerName('');
    setSelectedAttraction('');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-600 via-green-500 to-teal-400 p-6">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-4 drop-shadow-lg">
            üé´ –ö–∞—Å—Å–∞ - –ü—Ä–æ–¥–∞–∂–∞ –ë–∏–ª–µ—Ç–æ–≤
          </h1>
          <p className="text-lg text-white/90 drop-shadow">
            –ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ –±–∏–ª–µ—Ç—ã –∏ –≤—ã–¥–∞–≤–∞–π—Ç–µ –±—Ä–∞—Å–ª–µ—Ç—ã –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* –§–æ—Ä–º–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤ */}
          <Card className="bg-white/95 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="flex items-center text-2xl text-gray-800">
                <Ticket className="w-6 h-6 mr-2 text-blue-600" />
                –ü—Ä–æ–¥–∞–∂–∞ –±–∏–ª–µ—Ç–∞
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <Label htmlFor="customerName" className="text-gray-700">
                  –ò–º—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
                </Label>
                <div className="relative mt-1">
                  <User className="absolute left-3 top-3 w-4 h-4 text-gray-400" />
                  <Input
                    id="customerName"
                    value={customerName}
                    onChange={(e) => setCustomerName(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è"
                    className="pl-10"
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="attraction" className="text-gray-700">
                  –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω
                </Label>
                <Select value={selectedAttraction} onValueChange={setSelectedAttraction}>
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω..." />
                  </SelectTrigger>
                  <SelectContent>
                    {attractions.filter(a => a.isActive).map((attraction) => {
                      const summary = queueSummary.find(s => s.attractionId === attraction.id);
                      return (
                        <SelectItem key={attraction.id} value={attraction.id}>
                          <div className="flex items-center">
                            <span className="mr-2">{attraction.icon}</span>
                            <span className="mr-2">{attraction.name}</span>
                            <span className="text-sm text-gray-500">
                              ({summary?.queueLength || 0} –≤ –æ—á–µ—Ä–µ–¥–∏)
                            </span>
                          </div>
                        </SelectItem>
                      );
                    })}
                  </SelectContent>
                </Select>
              </div>

              <Button 
                onClick={handleSellTicket}
                className="w-full bg-gradient-to-r from-blue-600 to-green-600 hover:from-blue-700 hover:to-green-700 text-white"
                size="lg"
              >
                –ü—Ä–æ–¥–∞—Ç—å –±–∏–ª–µ—Ç –∏ –≤—ã–¥–∞—Ç—å –±—Ä–∞—Å–ª–µ—Ç
              </Button>
            </CardContent>
          </Card>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π */}
          <Card className="bg-white/95 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="flex items-center text-2xl text-gray-800">
                <Clock className="w-6 h-6 mr-2 text-green-600" />
                –¢–µ–∫—É—â–∏–µ –æ—á–µ—Ä–µ–¥–∏
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {queueSummary.map((summary) => {
                  const attraction = attractions.find(a => a.id === summary.attractionId);
                  if (!attraction) return null;

                  return (
                    <div key={summary.attractionId} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center">
                        <span className="text-2xl mr-3">{attraction.icon}</span>
                        <div>
                          <div className="font-semibold text-gray-800">{attraction.name}</div>
                          <div className="text-sm text-gray-500">
                            {attraction.duration} –º–∏–Ω –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-semibold text-lg text-blue-600">
                          {summary.queueLength} —á–µ–ª.
                        </div>
                        <div className="text-sm text-gray-500">
                          ~{summary.estimatedWaitTime} –º–∏–Ω
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};
