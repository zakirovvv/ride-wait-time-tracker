
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useSupabaseAuth } from '@/hooks/useSupabaseAuth';
import { toast } from '@/hooks/use-toast';
import { Lock, User, ArrowLeft } from 'lucide-react';

interface StaffLoginProps {
  onLoginSuccess: () => void;
  onBack?: () => void;
}

export const StaffLogin = ({
  onLoginSuccess,
  onBack
}: StaffLoginProps) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { login } = useSupabaseAuth();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    
    console.log('üéØ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞');
    
    if (!username.trim() || !password.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);
    
    try {
      console.log('üîÑ –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ login...');
      const success = await login(username.trim(), password);
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç login:', success);
      
      if (success) {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º toast...');
        toast({
          title: "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
          description: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É"
        });
        
        console.log('üéØ –í—ã–∑–æ–≤ onLoginSuccess...');
        onLoginSuccess();
      } else {
        console.log('‚ùå –ù–µ—É–¥–∞—á–Ω—ã–π –≤—Ö–æ–¥');
        toast({
          title: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞",
          description: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-800 via-gray-700 to-gray-900 flex items-center justify-center p-6">
      {onBack && (
        <Button 
          onClick={onBack} 
          variant="outline" 
          className="fixed top-4 left-4 z-50 bg-white/90 hover:bg-white text-gray-800 shadow-lg"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
      )}
      
      <Card className="w-full max-w-md bg-white/95 backdrop-blur-sm">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl text-gray-800 flex items-center justify-center">
            <Lock className="w-6 h-6 mr-2 text-blue-600" />
            –í—Ö–æ–¥ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
          </CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleLogin} className="space-y-4">
            <div>
              <Label htmlFor="username">–õ–æ–≥–∏–Ω</Label>
              <div className="relative mt-1">
                <User className="absolute left-3 top-3 w-4 h-4 text-gray-400" />
                <Input 
                  id="username" 
                  value={username} 
                  onChange={(e) => setUsername(e.target.value)} 
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω" 
                  className="pl-10" 
                  required 
                  disabled={isLoading}
                  autoComplete="username"
                />
              </div>
            </div>
            
            <div>
              <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
              <div className="relative mt-1">
                <Lock className="absolute left-3 top-3 w-4 h-4 text-gray-400" />
                <Input 
                  id="password" 
                  type="password" 
                  value={password} 
                  onChange={(e) => setPassword(e.target.value)} 
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" 
                  className="pl-10" 
                  required 
                  disabled={isLoading}
                  autoComplete="current-password"
                />
              </div>
            </div>
            
            <Button 
              type="submit" 
              className="w-full bg-blue-600 hover:bg-blue-700" 
              disabled={isLoading}
            >
              {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
};
