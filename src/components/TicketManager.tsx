import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { useSupabaseQueue } from '@/hooks/useSupabaseQueue';
import { useSupabaseAuth } from '@/hooks/useSupabaseAuth';
import { attractions } from '@/data/attractions';
import { toast } from '@/hooks/use-toast';
import { Trash2, Search, Clock, Ticket } from 'lucide-react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';

interface TicketManagerProps {
  onClose: () => void;
}

export const TicketManager = ({ onClose }: TicketManagerProps) => {
  const [searchTerm, setSearchTerm] = useState('');
  const { queue, removeFromQueue, isLoading } = useSupabaseQueue();
  const { currentUser } = useSupabaseAuth();

  const filteredQueue = queue.filter(entry => 
    entry.bracelet_code.toLowerCase().includes(searchTerm.toLowerCase()) ||
    entry.customer_name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleRemoveTicket = async (braceletCode: string) => {
    try {
      console.log('üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –±–∏–ª–µ—Ç:', braceletCode);
      console.log('üìã –¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:', queue);
      console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∏–ª–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
      const existingTicket = queue.find(entry => entry.bracelet_code === braceletCode);
      console.log('üé´ –ù–∞–π–¥–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç:', existingTicket);
      
      if (!existingTicket) {
        console.error('‚ùå –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏:', braceletCode);
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: `–ë–∏–ª–µ—Ç —Å –∫–æ–¥–æ–º ${braceletCode} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏`,
          variant: "destructive"
        });
        return;
      }

      // –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏
      await removeFromQueue(braceletCode, currentUser?.id);
      
      console.log('‚úÖ –ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:', braceletCode);
      toast({
        title: "–ë–∏–ª–µ—Ç —É–¥–∞–ª–µ–Ω",
        description: `–ë—Ä–∞—Å–ª–µ—Ç ${braceletCode} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏`,
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–∏–ª–µ—Ç: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        variant: "destructive"
      });
    }
  };

  const getAttractionName = (attractionId: string) => {
    const attraction = attractions.find(a => a.id === attractionId);
    return attraction ? attraction.name : attractionId;
  };

  const getAttractionIcon = (attractionId: string) => {
    const attraction = attractions.find(a => a.id === attractionId);
    return attraction ? attraction.icon : 'üé¢';
  };

  const formatTime = (dateString: string) => {
    return new Date(dateString).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-600 via-green-500 to-teal-400 flex items-center justify-center">
        <div className="text-white text-xl">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-600 via-green-500 to-teal-400 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-4xl font-bold text-white drop-shadow-lg">
            üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞–º–∏
          </h1>
          <Button
            onClick={onClose}
            variant="outline"
            className="bg-white/20 text-white border-white/30 hover:bg-white/30"
          >
            –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–¥–∞–∂–µ
          </Button>
        </div>

        {/* Search and Summary */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <Card className="md:col-span-2 bg-white/95 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="flex items-center">
                <Search className="w-5 h-5 mr-2" />
                –ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Input
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –±—Ä–∞—Å–ª–µ—Ç–∞ –∏–ª–∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full"
              />
            </CardContent>
          </Card>

          <Card className="bg-white/95 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="flex items-center">
                <Ticket className="w-5 h-5 mr-2 text-blue-600" />
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">–í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤:</span>
                <Badge variant="secondary">{queue.length}</Badge>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">–ù–∞–π–¥–µ–Ω–æ:</span>
                <Badge variant="outline">{filteredQueue.length}</Badge>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Tickets Table */}
        <Card className="bg-white/95 backdrop-blur-sm">
          <CardHeader>
            <CardTitle>–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∏–ª–µ—Ç—ã</CardTitle>
          </CardHeader>
          <CardContent>
            {filteredQueue.length === 0 ? (
              <div className="text-center py-8">
                <div className="text-gray-500 text-lg">
                  {queue.length === 0 ? '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤' : '–ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
                </div>
              </div>
            ) : (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>–ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω</TableHead>
                    <TableHead>–ö–æ–¥ –±—Ä–∞—Å–ª–µ—Ç–∞</TableHead>
                    <TableHead>–ö–ª–∏–µ–Ω—Ç</TableHead>
                    <TableHead>–ü–æ–∑–∏—Ü–∏—è</TableHead>
                    <TableHead>–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</TableHead>
                    <TableHead>–†–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è</TableHead>
                    <TableHead className="text-right">–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredQueue
                    .sort((a, b) => new Date(a.created_at || '').getTime() - new Date(b.created_at || '').getTime())
                    .map((entry) => (
                    <TableRow key={entry.id}>
                      <TableCell>
                        <div className="flex items-center">
                          <span className="text-lg mr-2">
                            {getAttractionIcon(entry.attraction_id)}
                          </span>
                          <span className="font-medium">
                            {getAttractionName(entry.attraction_id)}
                          </span>
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge variant="outline" className="font-mono">
                          {entry.bracelet_code}
                        </Badge>
                      </TableCell>
                      <TableCell>{entry.customer_name}</TableCell>
                      <TableCell>
                        <Badge variant="secondary">#{entry.position}</Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center text-sm text-gray-600">
                          <Clock className="w-4 h-4 mr-1" />
                          {formatTime(entry.created_at || '')}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="text-sm text-gray-600">
                          {formatTime(entry.estimated_time)}
                        </div>
                      </TableCell>
                      <TableCell className="text-right">
                        <Button
                          onClick={() => handleRemoveTicket(entry.bracelet_code)}
                          variant="destructive"
                          size="sm"
                        >
                          <Trash2 className="w-4 h-4 mr-1" />
                          –£–¥–∞–ª–∏—Ç—å
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};
