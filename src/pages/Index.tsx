import { useState, useEffect } from 'react';
import { AttractionSelector } from '@/components/AttractionSelector';
import { QueueBoard } from '@/components/QueueBoard';
import { VisitorDashboard } from '@/components/VisitorDashboard';
import { CashierInterface } from '@/components/CashierInterface';
import { CashierDisplay } from '@/components/CashierDisplay';
import { PublicQueueDisplay } from '@/components/PublicQueueDisplay';
import { OperatorInterface } from '@/components/OperatorInterface';
import { InstructorInterface } from '@/components/InstructorInterface';
import { StaffLogin } from '@/components/StaffLogin';
import { useStaffStore } from '@/stores/staffStore';
import { useBroadcastSync } from '@/hooks/useBroadcastSync';
import { useRealtimeSync } from '@/hooks/useRealtimeSync';
import { Button } from '@/components/ui/button';

const Index = () => {
  const [activeView, setActiveView] = useState<'home' | 'queue' | 'visitor' | 'cashier' | 'cashier-display' | 'public-display' | 'operator' | 'instructor' | 'staff-login'>('home');
  const [selectedAttraction, setSelectedAttraction] = useState<string | null>(null);
  const { isAuthenticated, currentUser, logout } = useStaffStore();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
  const { broadcastUpdate, isConnected, requestSync } = useBroadcastSync();
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  useRealtimeSync();

  useEffect(() => {
    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    (window as any).broadcastQueueUpdate = (data: any) => {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏:', data);
      broadcastUpdate('queue-update', data);
    };
    
    (window as any).broadcastSettingsUpdate = (data: any) => {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', data);
      broadcastUpdate('settings-update', data);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const handleRequestSync = () => {
      requestSync();
    };

    window.addEventListener('request-server-sync', handleRequestSync);

    return () => {
      delete (window as any).broadcastQueueUpdate;
      delete (window as any).broadcastSettingsUpdate;
      window.removeEventListener('request-server-sync', handleRequestSync);
    };
  }, [broadcastUpdate, requestSync]);

  const handleStaffLogin = () => {
    setActiveView('staff-login');
  };

  const handleLoginSuccess = () => {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ä–æ–ª–∏
    if (currentUser?.role === 'cashier') {
      setActiveView('cashier');
    } else if (currentUser?.role === 'instructor') {
      setActiveView('instructor');
    } else if (currentUser?.role === 'admin') {
      setActiveView('cashier'); // –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∫–∞—Å—Å–∏—Ä
    }
  };

  const handleHomeClick = () => {
    logout(); // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    setActiveView('home');
  };

  const handleBackToHome = () => {
    setActiveView('home');
  };

  const renderActiveView = () => {
    if (activeView === 'staff-login') {
      return <StaffLogin onLoginSuccess={handleLoginSuccess} onBack={handleBackToHome} />;
    }

    switch (activeView) {
      case 'home':
        return (
          <AttractionSelector 
            onAttractionSelect={(attractionId) => {
              setSelectedAttraction(attractionId);
              setActiveView('queue');
            }}
            onRoleSelect={(role) => setActiveView(role)}
          />
        );
      case 'queue':
        return selectedAttraction ? <QueueBoard attractionId={selectedAttraction} /> : null;
      case 'visitor':
        return <VisitorDashboard selectedAttraction={selectedAttraction} />;
      case 'public-display':
        return <PublicQueueDisplay />;
      case 'cashier':
        return isAuthenticated && (currentUser?.role === 'cashier' || currentUser?.role === 'admin') ? 
          <CashierInterface /> : 
          <div className="min-h-screen flex items-center justify-center flex-col">
            <p className="text-red-600">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –∫–∞—Å—Å–∏—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</p>
          </div>;
      case 'cashier-display':
        return <CashierDisplay />;
      case 'instructor':
        return isAuthenticated && currentUser?.role === 'instructor' ? 
          <InstructorInterface /> : 
          <div className="min-h-screen flex items-center justify-center flex-col">
            <p className="text-red-600">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞.</p>
          </div>;
      case 'operator':
        return isAuthenticated && currentUser?.role === 'admin' ? 
          <OperatorInterface /> : 
          <div className="min-h-screen flex items-center justify-center flex-col">
            <p className="text-red-600">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</p>
          </div>;
      default:
        return (
          <AttractionSelector 
            onAttractionSelect={(attractionId) => {
              setSelectedAttraction(attractionId);
              setActiveView('queue');
            }}
            onRoleSelect={(role) => setActiveView(role)}
          />
        );
    }
  };

  return (
    <div className="relative">
      {activeView !== 'home' && activeView !== 'staff-login' && (
        <button
          onClick={handleHomeClick}
          className="fixed top-4 left-4 z-50 bg-white/90 hover:bg-white px-4 py-2 rounded-lg shadow-lg transition-all"
        >
          ‚Üê –ì–ª–∞–≤–Ω–∞—è
        </button>
      )}
      
      {activeView === 'cashier-display' && (
        <Button
          onClick={() => setActiveView('cashier')}
          className="fixed top-4 right-4 z-50 bg-green-600 hover:bg-green-700 text-white shadow-lg"
        >
          üé´ –ü—Ä–æ–¥–∞–∂–∞ –±–∏–ª–µ—Ç–æ–≤
        </Button>
      )}
      
      {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ */}
      {activeView === 'home' && (
        <>
          <Button
            onClick={() => setActiveView('public-display')}
            className="fixed top-4 left-4 z-50 bg-blue-600 hover:bg-blue-700 text-white shadow-lg"
          >
            üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞–º
          </Button>
          
          <Button
            onClick={handleStaffLogin}
            className="fixed top-4 right-4 z-50 bg-gray-800 hover:bg-gray-900 text-white shadow-lg"
          >
            –í—Ö–æ–¥ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
          </Button>
          
          {/* –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–µ—Ç–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
          <div className="fixed bottom-4 left-4 z-50 space-y-2">
            <div className={`px-3 py-1 rounded-full text-sm flex items-center space-x-2 ${
              isConnected 
                ? "bg-green-600 text-white" 
                : "bg-red-600 text-white"
            }`}>
              <span>
                {isConnected ? "üåê" : "üì±"}
              </span>
              <span>
                {isConnected ? "–°–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω" : "–°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω"}
              </span>
            </div>
            {!isConnected && (
              <div className="text-xs text-gray-600 bg-white/90 px-2 py-1 rounded">
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
              </div>
            )}
          </div>
        </>
      )}
      
      {renderActiveView()}
    </div>
  );
};

export default Index;
