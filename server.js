
const WebSocket = require('ws');
const http = require('http');
const https = require('https');
const fs = require('fs');

const server = http.createServer();
const wss = new WebSocket.Server({ 
  server,
  // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  verifyClient: () => true
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
let queueData = [];
let settingsData = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
function broadcast(data) {
  console.log(`üì° –†–∞—Å—Å—ã–ª–∞–µ–º –¥–∞–Ω–Ω—ã–µ ${data.type} ${wss.clients.size} –∫–ª–∏–µ–Ω—Ç–∞–º`);
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      try {
        client.send(JSON.stringify(data));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É:', error);
      }
    }
  });
}

wss.on('connection', (ws, req) => {
  console.log(`‚úÖ –ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å. –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${wss.clients.size}`);
  console.log(`üìç IP –∫–ª–∏–µ–Ω—Ç–∞: ${req.socket.remoteAddress}`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
  ws.send(JSON.stringify({
    type: 'init',
    queue: queueData,
    settings: settingsData
  }));

  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message.toString());
      console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: ${data.type}`);
      
      if (data.type === 'queue-update') {
        queueData = data.data;
        broadcast({ type: 'queue-sync', data: queueData });
        console.log(`üîÑ –û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞ –≤—Å–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º (${wss.clients.size} –∫–ª–∏–µ–Ω—Ç–æ–≤)`);
      }
      
      if (data.type === 'settings-update') {
        settingsData = data.data;
        broadcast({ type: 'settings-sync', data: settingsData });
        console.log(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã –≤—Å–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º (${wss.clients.size} –∫–ª–∏–µ–Ω—Ç–æ–≤)`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  });

  ws.on('close', () => {
    console.log(`‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${wss.clients.size - 1}`);
  });

  ws.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
  });
});

const PORT = 3001;

server.listen(PORT, '0.0.0.0', () => {
  console.log('üåê='.repeat(50));
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ –∞–¥—Ä–µ—Å—É:`);
  console.log(`   http://[IP-–∞–¥—Ä–µ—Å]:${PORT}`);
  console.log(`üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ipconfig (Windows) –∏–ª–∏ ifconfig (Mac/Linux)`);
  console.log('üåê='.repeat(50));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
});

process.on('SIGINT', () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});
