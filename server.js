
const WebSocket = require('ws');
const http = require('http');

const server = http.createServer();
const wss = new WebSocket.Server({ 
  server,
  verifyClient: () => true
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã)
let serverQueueData = [];
let serverSettingsData = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
function broadcast(data) {
  console.log(`üì° –†–∞—Å—Å—ã–ª–∞–µ–º –¥–∞–Ω–Ω—ã–µ ${data.type} –¥–ª—è ${wss.clients.size} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
  const message = JSON.stringify(data);
  
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      try {
        client.send(message);
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É:', error);
      }
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
function sendCurrentData(ws) {
  try {
    ws.send(JSON.stringify({
      type: 'init',
      queueData: serverQueueData,
      settingsData: serverSettingsData
    }));
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É:', error);
  }
}

wss.on('connection', (ws, req) => {
  console.log(`‚úÖ –ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å. –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${wss.clients.size}`);
  console.log(`üìç IP –∫–ª–∏–µ–Ω—Ç–∞: ${req.socket.remoteAddress}`);

  // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
  sendCurrentData(ws);

  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message.toString());
      console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: ${data.type}`);
      
      if (data.type === 'queue-update') {
        serverQueueData = data.data || [];
        console.log(`üîÑ –û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –≠–ª–µ–º–µ–Ω—Ç–æ–≤: ${serverQueueData.length}`);
        
        // –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        broadcast({ 
          type: 'queue-sync', 
          data: serverQueueData 
        });
      }
      
      if (data.type === 'settings-update') {
        serverSettingsData = data.data || [];
        console.log(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –≠–ª–µ–º–µ–Ω—Ç–æ–≤: ${serverSettingsData.length}`);
        
        // –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        broadcast({ 
          type: 'settings-sync', 
          data: serverSettingsData 
        });
      }

      if (data.type === 'request-sync') {
        // –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        sendCurrentData(ws);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  });

  ws.on('close', () => {
    console.log(`‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${wss.clients.size - 1}`);
  });

  ws.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
  });
});

const PORT = 3001;

server.listen(PORT, '0.0.0.0', () => {
  console.log('üåê' + '='.repeat(60));
  console.log(`üöÄ –°–ï–†–í–ï–† –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ó–ê–ü–£–©–ï–ù –ù–ê –ü–û–†–¢–£ ${PORT}`);
  console.log(`üì± –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:`);
  console.log(`   1. –£–∑–Ω–∞–π—Ç–µ IP-–∞–¥—Ä–µ—Å —ç—Ç–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞`);
  console.log(`   2. –ù–∞ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –æ—Ç–∫—Ä–æ–π—Ç–µ: http://[IP-–∞–¥—Ä–µ—Å]:5173`);
  console.log(`üí° –ü–æ–ª—É—á–∏—Ç—å IP: ipconfig (Windows) –∏–ª–∏ ifconfig (Mac/Linux)`);
  console.log('üåê' + '='.repeat(60));
});

server.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
});

process.on('SIGINT', () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});
