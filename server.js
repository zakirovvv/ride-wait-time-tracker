
const WebSocket = require('ws');
const http = require('http');
const fs = require('fs');
const path = require('path');

const server = http.createServer();
const wss = new WebSocket.Server({ server });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
let queueData = [];
let settingsData = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
function broadcast(data) {
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify(data));
    }
  });
}

wss.on('connection', (ws) => {
  console.log('–ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å');

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
  ws.send(JSON.stringify({
    type: 'init',
    queue: queueData,
    settings: settingsData
  }));

  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);
      
      if (data.type === 'queue-update') {
        queueData = data.data;
        broadcast({ type: 'queue-sync', data: queueData });
        console.log('–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞ –≤—Å–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º');
      }
      
      if (data.type === 'settings-update') {
        settingsData = data.data;
        broadcast({ type: 'settings-sync', data: settingsData });
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã –≤—Å–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  });

  ws.on('close', () => {
    console.log('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å');
  });
});

const PORT = 3001;
server.listen(PORT, '0.0.0.0', () => {
  console.log(`üåê –°–µ—Ä–≤–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ –∞–¥—Ä–µ—Å—É: http://[IP-–∞–¥—Ä–µ—Å]:${PORT}`);
});
