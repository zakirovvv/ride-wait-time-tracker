
const WebSocket = require('ws');
const http = require('http');
const fs = require('fs');
const path = require('path');

const server = http.createServer();
const wss = new WebSocket.Server({ 
  server,
  verifyClient: () => true
});

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
const DATA_DIR = path.join(__dirname, 'local-data');
const QUEUE_FILE = path.join(DATA_DIR, 'queue.json');
const SETTINGS_FILE = path.join(DATA_DIR, 'settings.json');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(DATA_DIR)) {
  fs.mkdirSync(DATA_DIR, { recursive: true });
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ
let serverQueueData = [];
let serverSettingsData = [];

try {
  if (fs.existsSync(QUEUE_FILE)) {
    serverQueueData = JSON.parse(fs.readFileSync(QUEUE_FILE, 'utf8'));
  }
  if (fs.existsSync(SETTINGS_FILE)) {
    serverSettingsData = JSON.parse(fs.readFileSync(SETTINGS_FILE, 'utf8'));
  }
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª—ã
function saveDataToFiles() {
  try {
    fs.writeFileSync(QUEUE_FILE, JSON.stringify(serverQueueData, null, 2));
    fs.writeFileSync(SETTINGS_FILE, JSON.stringify(serverSettingsData, null, 2));
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
function broadcast(data) {
  console.log(`üì° –†–∞—Å—Å—ã–ª–∞–µ–º –¥–∞–Ω–Ω—ã–µ ${data.type} –¥–ª—è ${wss.clients.size} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
  const message = JSON.stringify(data);
  
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      try {
        client.send(message);
        console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É:', error);
      }
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
function sen
